// ============================================================================
// routes/users.ts - "–ê–†–•–ò–í –õ–ò–ß–ù–´–• –î–ï–õ" (CRUD –¥–ª—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
// ============================================================================
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
// —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ (CRUD).
// ============================================================================

// --- 1. –ò–ú–ü–û–†–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
import { Router } from "express";
import { readFileSync, writeFileSync } from "fs"; // ‚ùóÔ∏è –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
import { resolve } from "path";
import bcrypt from "bcryptjs";
import { requireRole } from "../middlewares/authMiddleware"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ–≥–æ "–æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞".

const router = Router();
// ‚ùóÔ∏è –í –±—É–¥—É—â–µ–º —ç—Ç–æ—Ç –ø—É—Ç—å –∏ –≤—Å—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –±—É–¥—É—Ç –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω—ã
//    –≤ –º–æ–¥—É–ª–µ `db/userRepository.ts`.
const filePath = resolve(__dirname, "../db/users.json");

// ============================================================================
// --- –ú–ê–†–®–†–£–¢: GET /api/users (–ß—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞) ---
// ============================================================================
// ‚ùóÔ∏è –≠—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç —Å–µ–π—á–∞—Å –Ω–µ –∑–∞—â–∏—â–µ–Ω `requireRole`, –Ω–æ –∑–∞—â–∏—â–µ–Ω `requireAuth`
//    –≤ `index.ts`. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –õ–Æ–ë–û–ô –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç
//    –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç—å—é.
router.get("/", (_req, res) => {
  try {
    const data = readFileSync(filePath, "utf-8");
    res.json(JSON.parse(data));
  } catch {
    res.status(500).json({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" });
  }
});

// ============================================================================
// --- –ú–ê–†–®–†–£–¢: POST /api/users (–°–æ–∑–¥–∞–Ω–∏–µ) ---
// ============================================================================
// üîê –ó–∞—â–∏—â–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –¥–ª—è 'admin'.
router.post("/", requireRole("admin"), async (req, res) => {
  try {
    const newUser = req.body;
    const ip = req.ip || req.connection.remoteAddress || "unknown IP";
    const users = JSON.parse(readFileSync(filePath, "utf-8"));

    // --- –í–∞–ª–∏–¥–∞—Ü–∏—è Email ---
    const emailRegex = /^[^@\s]+@[^@\s]+\.[^@\s]+$/;
    if (!newUser.email || !emailRegex.test(newUser.email)) {
      console.warn(`[USERS] Create failed (invalid email): ${newUser.email} from ${ip}`);
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email" });
    }

    // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –ü–∞—Ä–æ–ª—è ---
    if (!newUser.password || newUser.password.length < 6) {
      console.warn(`[USERS] Create failed (short password): ${newUser.email} from ${ip}`);
      return res.status(400).json({ error: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" });
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç ---
    if (users.find((u: any) => u.email === newUser.email)) {
      console.warn(`[USERS] Create failed (duplicate email): ${newUser.email} from ${ip}`);
      return res.status(409).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    const newId = users.length > 0 ? Math.max(...users.map((u: any) => u.id)) + 1 : 1;
    const passwordHash = await bcrypt.hash(newUser.password, 10);
    const userWithId = { id: newId, ...newUser, password: passwordHash };

    users.push(userWithId);
    writeFileSync(filePath, JSON.stringify(users, null, 2), "utf-8");

    console.log(`[USERS] User created: id=${newId}, email=${newUser.email}, role=${newUser.role}, by IP=${ip}`);
    res.status(201).json(userWithId);
  } catch {
    res.status(400).json({ error: "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }
});

// ============================================================================
// --- –ú–ê–†–®–†–£–¢: DELETE /api/users/:id (–£–¥–∞–ª–µ–Ω–∏–µ) ---
// ============================================================================
// üîê –ó–∞—â–∏—â–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –¥–ª—è 'admin'.
router.delete("/:id", requireRole("admin"), (req, res) => {
  const id = Number(req.params.id);
  if (!id) return res.status(400).json({ error: "Invalid ID" });
  try {
    const users = JSON.parse(readFileSync(filePath, "utf-8"));
    const filtered = users.filter((u: any) => u.id !== id);
    writeFileSync(filePath, JSON.stringify(filtered, null, 2), "utf-8");
    res.json({ success: true });
  } catch {
    res.status(500).json({ error: "Server error" });
  }
});

// ============================================================================
// --- –ú–ê–†–®–†–£–¢: PUT /api/users/:id (–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ) ---
// ============================================================================
// ‚ùóÔ∏è –≠—Ç–æ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–π –∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç. –í –±—É–¥—É—â–µ–º –µ–≥–æ –ª–æ–≥–∏–∫—É
//    –ª—É—á—à–µ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.
// üîê –ó–∞—â–∏—â–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –¥–ª—è 'admin'.
router.put("/:id", requireRole("admin"), async (req, res) => {
  const id = Number(req.params.id);
  if (!id) return res.status(400).json({ error: "Invalid ID" });
  try {
    const updatedData = req.body;
    const users = JSON.parse(readFileSync(filePath, "utf-8"));
    const index = users.findIndex((u: any) => u.id === id);
    if (index === -1) return res.status(404).json({ error: "User not found" });

    // --- –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è ---
    // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å, —Ö—ç—à–∏—Ä—É–µ–º –µ–≥–æ.
    let passwordToSave = users[index].password;
    if (updatedData.password) {
      passwordToSave = await bcrypt.hash(updatedData.password, 10);
    }
    
    // --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
    // –°–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤—ã–º–∏.
    const mergedUser = { 
      ...users[index], 
      ...updatedData, 
      password: passwordToSave 
    };
    
    users[index] = mergedUser;
    writeFileSync(filePath, JSON.stringify(users, null, 2), "utf-8");
    
    res.json(users[index]);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e);
    res.status(400).json({ error: "Invalid request data" });
  }
});

export default router;