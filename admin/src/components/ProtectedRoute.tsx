// ============================================================================
// src/components/ProtectedRoute.tsx - "ЧИСТЫЙ ОХРАННИК" ДЛЯ МАРШРУТОВ
// ============================================================================
// Этот компонент реализует паттерн "Auth Guard" (охранник авторизации).
// Его единственная задача - проверить, есть ли у пользователя "пропуск" (токен).
// Если пропуска нет - он перенаправляет на страницу логина.
// Если пропуск есть - он разрешает доступ к дочерним маршрутам.
//
// ❗️ Это более правильный и чистый подход, чем смешивание этой логики
//    с логикой отображения в компоненте Layout.tsx.
// ============================================================================

// --- 1. ИМПОРТЫ ---

import { Navigate, Outlet } from "react-router-dom";
// - Navigate: Компонент, который при отрисовке декларативно "перебрасывает"
//             пользователя на другой маршрут.
// - Outlet: "Портал" или "место для вставки", куда будет отрисован
//           реальный компонент страницы, если "охранник" пропустит.

// ============================================================================
// --- КОМПОНЕНТ ProtectedRoute ---
// ============================================================================

export default function ProtectedRoute() {
  // 1. Проверяем наличие "пропуска" в "кармане" браузера.
  const token = localStorage.getItem("token");

  // 2. Если "пропуска" нет...
  if (!token) {
    // ...то мы немедленно "перебрасываем" пользователя на страницу входа.
    // Атрибут `replace` - это важная деталь. Он говорит: "Замени текущую
    // страницу в истории браузера на страницу /login". Это не позволит
    // пользователю нажать кнопку "назад" и снова попасть на защищенную
    // страницу, избегая бесконечных перенаправлений.
    return <Navigate to="/login" replace />;
  }

  // 3. Если "пропуск" на месте...
  // ...то "охранник" пропускает дальше, и React Router отрисовывает
  // в "портал" <Outlet /> нужную нам страницу.
  return <Outlet />;
}
