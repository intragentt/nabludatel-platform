// ============================================================================
// src/App.tsx - ГЛАВНЫЙ НАВИГАТОР ПРИЛОЖЕНИЯ ("КАРТА ДОРОГ")
// ============================================================================
// Этот компонент не отображает много собственного контента. Его главная
// задача - определять, какой компонент-страницу нужно показать
// пользователю в зависимости от текущего URL в браузере.
// ============================================================================

// --- 1. ИМПОРТЫ ---

// Подключаем "инструменты" для навигации из библиотеки react-router-dom.
// Можно представить, что:
// - BrowserRouter: это наша "GPS-система", которая следит за URL.
// - Routes: это "железнодорожный узел", который решает, куда направить "поезд".
// - Route: это отдельный "путь" или "маршрут" на нашей карте.
import { Route, Routes, BrowserRouter } from "react-router-dom";

// --- КОМПОНЕНТЫ-ОБЁРТКИ (Layouts) ---

// Импортируем наш главный "каркас" приложения. Внутри Layout обычно
// находятся элементы, которые видны на всех страницах: шапка (Header),
// боковое меню (Sidebar), подвал (Footer) и т.д.
import Layout from "./components/Layout";

// --- СТРАНИЦЫ (Pages) ---
// Импортируем все "пункты назначения" на нашей карте -
// полноценные страницы админ-панели.

import UsersPage from "./pages/Users";
import SettingsPage from "./pages/SettingsPage";
import LoginPage from "./pages/LoginPage";
import SitesPage from "./pages/SitesPage";
import KyanchirSiteAdmin from "./pages/sites/Kyanchir"; // Страница для управления конкретным сайтом "Kyanchir".

// ============================================================================
// --- КОМПОНЕНТ App ---
// ============================================================================

function App() {
  return (
    // 1. Включаем нашу "GPS-систему". BrowserRouter должен оборачивать
    //    всё приложение, чтобы навигация работала везде.
    <BrowserRouter>
      {/* 2. Активируем "железнодорожный узел". Routes будет смотреть на
             текущий URL и выбирать ПЕРВЫЙ подходящий маршрут из списка ниже. */}
      <Routes>
        {/*
          МАРШРУТ №1: Страница логина.
          Это отдельный маршрут, который НЕ ИСПОЛЬЗУЕТ общий "каркас" Layout.
          Это правильно, так как на странице входа не должно быть меню и шапки.
        */}
        <Route path="/login" element={<LoginPage />} />

        {/*
          МАРШРУТ №2: Группа маршрутов с общим каркасом.
          Это очень мощный прием! Мы говорим: "Для всех маршрутов,
          которые находятся ВНУТРИ этого, сначала покажи компонент Layout,
          а уже внутри него - саму страницу".
        */}
        <Route element={<Layout />}>
          {/*
            Ниже перечислены все страницы, которые будут отображаться
            внутри нашего "каркаса" Layout.
          */}

          {/* Главная страница по умолчанию (когда путь просто "/") */}
          <Route path="/" element={<SitesPage />} />

          {/* Другие страницы админки */}
          <Route path="/users" element={<UsersPage />} />
          <Route path="/sites" element={<SitesPage />} />
          <Route path="/settings" element={<SettingsPage />} />

          {/* ✅ Маршрут к странице управления конкретным сайтом. */}
          <Route path="/sites/kyanchir" element={<KyanchirSiteAdmin />} />
        </Route>
      </Routes>
    </BrowserRouter>
  );
}

// Экспортируем наш главный компонент, чтобы его мог "завести" main.tsx
export default App;
