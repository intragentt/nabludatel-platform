// ============================================================================
// src/lib/utils.ts - НАШ "ШВЕЙЦАРСКИЙ НОЖ" ДЛЯ СТИЛЕЙ
// ============================================================================
// Этот файл содержит вспомогательные утилиты. Сейчас здесь находится
// одна, но невероятно важная функция - `cn`.
// ============================================================================

// --- 1. ИМПОРТЫ ---

import { clsx, type ClassValue } from "clsx";
// `clsx`: "Умный сортировщик" классов. Позволяет условно объединять
// имена классов. Например: clsx('a', true && 'b', { c: false, d: true }) -> "a b d"

import { twMerge } from "tailwind-merge";
// `tailwind-merge`: "Главный стилист". Умная утилита, которая разрешает
// конфликты в классах Tailwind CSS. Например: twMerge('p-2', 'p-4') -> "p-4".

// ============================================================================
// --- ФУНКЦИЯ `cn` ---
// ============================================================================

/**
 * "Склеивает" имена классов Tailwind CSS без конфликтов.
 *
 * Метафора: Это как "супер-клей", который не только соединяет детали,
 * но и следит, чтобы они не мешали друг другу.
 *
 * @param inputs - Любое количество классов в любом формате (строки, объекты, массивы).
 * @returns Финальная, "чистая" строка с классами без конфликтов.
 *
 * Пример использования в компоненте:
 * 
 * 
 * <div className={cn("p-4 bg-blue-500", props.className)}>
  ...
 * </div>
 * Если в `props.className` придет 'p-8 bg-red-500', то итоговый класс
 * будет 'p-8 bg-red-500', потому что `twMerge` правильно разрешит конфликты.
 */
export function cn(...inputs: ClassValue[]) {
  // 1. Сначала "сортировщик" `clsx` собирает все классы в одну строку.
  // 2. Затем "стилист" `twMerge` чистит эту строку от конфликтов.
  return twMerge(clsx(inputs));
}
